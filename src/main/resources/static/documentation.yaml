openapi: 3.0.1
info:
  title: OT275-Server "Somos m√°s"
  version: v1.0
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:

  /auth/register:

    post:
      tags:
        - Auth
      summary: Register a new "User" and persists it on the database.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
        required: true
      responses:
        "201":
          description: Registration was successful, the new "User" is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
        "400":
          description: The provided body does not have a correct format or one of the validations is missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRegisterUser'

  /auth/login:

    post:
      tags:
        - Auth
      summary: Log in as an existing "User" and provide an access token.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        "200":
          description: The "User" has successfully logged in and returns an access token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        "400":
          description: The provided body does not have a correct format or one of the validations is missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestLoginUser'
        "403":
          description: Invalid credentials have been provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenLogin'

  /auth/me:

    security:
      - BearerAuth: [ user ]
    get:
      tags:
        - Auth
      summary: Retrieves the data of an authenticated "User" through an access token.
      operationId: me
      responses:
        "200":
          description: Successfully retrieved the "User" data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResponse'
        "403":
          description: No authentication has been provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /activities:

    post:
      tags:
        - Activities
      operationId: create_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateActivityRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateActivityResponse'

  /activities/{id}:

    put:
      tags:
        - Activities
      operationId: update_2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateActivityRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateActivityResponse'

  /categories:

    post:
      summary: Creates a new "Category" and persists it to the database.
      tags:
        - Categories
      operationId: create-category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        "201":
          description: Creation was successful, the created "Category" is returned.
          content:
            application/json:
              $ref: '#/components/schemas/GetCategoryResponse'
        "400":
          description: The provided body does not have a correct body or misses one or more of the validations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestCategories'
        "403":
          description: Invalid Credentials were provided. Admin credentials needed
          content:
            application/json:
              $ref: '#/components/schemas/Forbidden'
    get:
      tags:
        - Categories
      summary: Returns the first page of "Categories", listing up to ten elements, "Link" header may include links to subsequent pages if more than ten elements exist.
      operationId: paginate-categories
      responses:
        "200":
          description: The first page of results is returned, if there are no "Categories" in the database it returns an empty list with zero pages and no links.
          headers:
            Link:
              description: Links leading to the first, last, next and / or previous page of the results if available.
              schema:
                $ref: '#/components/schemas/LinkHeader'
              type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCategoryResponse'
        "403":
          description: Invalid Credentials were provided. User or Admin credentials needed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /categories/{id}:
    get:
      summary: Returns the "Category" resource identified by the "id" parameter provided in the URI path.
      tags:
        - Categories
      operationId: get-category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCategoryResponse'
        "403":
          description: Invalid Credentials were provided. User or Admin credentials needed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        "404":
          description: The given "id" does not corresponds to an entry in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryNotFound'
    put:
      summary: Updates the "Category" resource identified by the "id" parameter provided in the URI path.
      tags:
        - Categories
      operationId: update-category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
        required: true
      responses:
        "200":
          description: The update operation was successful. The updated "Category" is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCategoryResponse'
        "400":
          description: The provided body does not have a correct misses one of more of the validations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestUpdateCategories'
        "403":
          description: Invalid Credentials were provided. Admin credentials needed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        "404":
          description: The given "id" does not corresponds to an entry in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryNotFound'
    delete:
      summary: Deletes the "Category" resource identified by the "id" parameter provided in the URI path, by setting the "isSoftDeleted" attribute to "true".
      tags:
        - News
      operationId: delete-category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: The resource has been successfully deleted.
        "403":
          description: Invalid Credentials were provided. Admin credentials needed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        "404":
          description: The given "id" does not corresponds to an entry in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryNotFound'

  /comments:

    post:
      tags:
        - Comments
      operationId: create_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCommentResponse'

    get:
      tags:
        - Comments
      operationId: list_6
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCommentResponse'

  /comments/{id}:

    put:
      tags:
        - Comments
      operationId: update_4
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentResponse'

    delete:
      tags:
        - Comments
      operationId: delete_5
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK

  /contacts:

    post:
      tags:
        - Contact
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContactRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateContactResponse'

    get:
      tags:
        - Contact
      operationId: list_5
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListContactResponse'

  /members:

    get:
      tags:
        - Members
      operationId: list_4
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMemberResponse'

  /members/{id}:

    delete:
      tags:
        - Members
      operationId: delete_4
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK

  /news:

    post:
      summary: Creates a "New" and persists it to the databse.
      tags:
        - News
      operationId: create-news
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNewsRequest'
        required: true
      responses:
        "201":
          description: Creation was succesfull, the created "News" is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNewsResponse'
        "400":
          description: The provided body does not have a correct misses one of more of the validations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestCreateNews'
        "403":
          description: Invalid Credentials were provided. Admin credentials needed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

    get:
      summary: Returns the first page of "News", listing up to ten elements, "Link" header may include links to subsequent pages if more than ten elements exist
      tags:
        - News
      operationId: paginate-news
      responses:
        "200":
          description: The first page of results is returned, if there are no "News" in the databse it returns an emptly list with zero pages and no links
          headers:
            Link:
              description: Links  leading to the first,last,next and/or previous page of  the results if available
              schema:
                $ref: '#/components/schemas/LinkHeader'
              type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNewsResponse'
        "403":
          description: Invalid Credentials were provided. User or Admin credentials needed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /news/{id}:

    get:
      summary: Returns the "News" resource identified by the "id" parameter provided in the URI path.
      tags:
        - News
      operationId: get-news
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNewsResponse'
        "404":
          description: The given "id" does not corresponds to an entry in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsNotFound'
        "403":
          description: Invalid Credentials were provided. User or Admin credentials needed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

    put:
      summary: Updates the "News" resource identified by the "id" parameter provided in the URI path.
      tags:
        - News
      operationId: update-news
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNewsRequest'
        required: true
      responses:
        "200":
          description: Creation was succesfull, the created "News" is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNewsResponse'
        "400":
          description: The provided body does not have a correct misses one of more of the validations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestUpdateNews'
        "403":
          description: Invalid Credentials were provided. Admin credentials needed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        "404":
          description: The given "id" does not corresponds to an entry in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsNotFound'

    delete:
      summary: Deletes the "News" resource identified by the "id" parameter provided in the URI path, by setting the "isSoftDeleted" attribute to "true"
      tags:
        - News
      operationId: delete-news
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: The resource has been succesfully deleted
        "403":
          description: Invalid Credentials were provided. Admin credentials needed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        "404":
          description: The given "id" does not corresponds to an entry in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsNotFound'

  /news/{id}/comments:

    get:
      summary: Returns a list of comments related to the "News" resource identified by the "id" paramether in the URI path.
      tags:
        - News
      operationId: getWithComments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNewsWithCommentsResponse'
        "403":
          description: Invalid Credentials were provided. Admin credentials needed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        "404":
          description: The given "id" does not corresponds to an entry in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsNotFound'

  /organization/public:

    get:
      tags:
        - Organization
      operationId: get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationResponse'

    patch:
      tags:
        - Organization
      operationId: patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationResponse'

  /slides:

    post:
      tags:
        - Slides
      operationId: add
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSlideRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSlideResponse'

    get:
      tags:
        - Slides
      operationId: list
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSlideResponse'

  /slides/{id}:

    get:
      tags:
        - Slides
      operationId: getBy
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSlideResponse'

    put:
      tags:
        - Slides
      operationId: update_2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSlideRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSlideResponse'

    delete:
      tags:
        - Slides
      operationId: delete_2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK

  /testimonials:

    security:
      bearerAuth: [ user, admin ]

    post:
      summary: Creates a new "Testimonial" and persists it in the database.
      tags:
        - Testimonials
      operationId: create-testimonial
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTestimonialRequest'
        required: true
      responses:
        "201":
          description: Creation was successful, the created "Testimonial" is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTestimonialResponse'
        "400":
          description: The provided body does not have a correct body or misses one or more of the validations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestTestimonial'
        "403":
          description: Invalid credentials were provided. User or Admin credentials needed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

    get:
      tags:
        - Testimonials
      summary: Returns the first page of "Testimonials", listing up to ten elements, "Link" header may include links to subsequent pages if more than ten elements exist.
      operationId: paginate-testimonials
      responses:
        "200":
          description: The first page of results is returned, if there are no "Testimonials" in the database it returns an empty list with zero pages and no links.
          headers:
            Link:
              description: Links leading to the first, last, next and / or previous page of the results if available.
              schema:
                $ref: '#/components/schemas/LinkHeader'
              type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTestimonialsResponse'
        "403":
          description: Invalid credentials were provided. User or Admin credentials needed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /testimonials/{id}:

    security:
      bearerAuth: [ user, admin ]

    put:
      summary: Updates the "Testimonial" resource identified by the "ID" parameter provided in the URI path.
      tags:
        - Testimonials
      operationId: update-testimonial
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTestimonialRequest'
        required: true
      responses:
        "200":
          description: The update operation was successful. The updated "Testimonial" is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTestimonialResponse'
        "400":
          description: The provided body does not have a correct misses one of more of the validations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestTestimonial'
        "403":
          description: Invalid credentials were provided. Admin credentials needed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        "404":
          description: The given "ID" does not corresponds to an entry in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestimonialNotFound'

    delete:
      summary: Deletes the "Testimonial" resource identified by the "ID" parameter provided in the URI path, by setting the "isSoftDeleted" attribute to "true".
      tags:
        - Testimonials
      operationId: delete-testimonial
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: The resource has been successfully deleted.
        "403":
          description: Invalid credentials were provided. User or Admin credentials needed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        "404":
          description: The given "ID" does not corresponds to an entry in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestimonialNotFound'

  /users:

    get:
      tags:
        - Users
      operationId: list
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserResponse'

  /users/{id}:

    put:
      tags:
        - Users
      operationId: update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'

    delete:
      tags:
        - Users
      operationId: delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK

components:
  schemas:
    CreateTestimonialRequest:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 50
          minLength: 0
          type: string
          example: Testimonial name
        content:
          maxLength: 150
          minLength: 0
          type: string
          example: Testimonial content
        image:
          type: string
          example: https://s3.com/image.jpg
    UpdateTestimonialRequest:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 50
          minLength: 0
          type: string
          example: Testimonial new name
        content:
          maxLength: 150
          minLength: 0
          type: string
          example: Testimonial new content
        image:
          type: string
          example: Testimonial new image URL
    ListTestimonialsResponse:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 0
        size:
          type: integer
          format: int32
          example: 10
        totalPages:
          type: integer
          format: int32
          example: 1
        categories:
          type: array
          items:
            $ref: '#/components/schemas/GetTestimonialResponse'
    GetTestimonialResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Testimonial name
        content:
          type: string
          example: Testimonial content
        image:
          type: string
          example: https://s3.com/image.jpg
    BadRequestTestimonial:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          example: 400
        message:
          type: string
          example: Bad Request.
        moreInfo:
          type: array
          items:
            type: string
          example:
            - Content must be alphanumeric.
            - Name must not be empty.
            - Name must contain only spaces and letters.
    TestimonialNotFound:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          example: 404
        message:
          type: string
          example: Object not found in database.
        moreInfo:
          type: array
          items:
            type: string
          example: Testimonial not found.
    UpdateUserRequest:
      required:
        - firstName
        - lastName
        - password
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        imageUrl:
          type: string
        password:
          maxLength: 16
          minLength: 8
          type: string
    UpdateUserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        imageUrl:
          type: string
    UpdateCategoryRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: new category name
        description:
          type: string
          example: new category description
        imageUrl:
          type: string
          example: new category image
    UpdateActivityRequest:
      required:
        - content
        - imageUrl
        - name
      type: object
      properties:
        content:
          type: string
        imageUrl:
          type: string
        name:
          type: string
    UpdateActivityResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
        imageUrl:
          type: string
        name:
          type: string
    CreateSlideRequest:
      required:
        - base64FileEncoded
      type: object
      properties:
        text:
          type: string
        order:
          type: integer
          format: int32
        base64FileEncoded:
          type: string
        contentType:
          type: string
    GetSlideResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        imageUrl:
          type: string
        text:
          type: string
        position:
          type: integer
          format: int32
    CreateCategoryRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: new-category-name
        description:
          type: string
          example: new-category-description
        image:
          type: string
          example: new-category.jpg
    CreateCategoryResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        image:
          type: string
    RegisterUserRequest:
      type: object
      properties:
        firstName:
          type: string
          example: Edgar Frank
        lastName:
          type: string
          example: Codd
        email:
          type: string
          example: edgarfrank@codd.com
        password:
          maxLength: 16
          minLength: 8
          type: string
          example: abcd1234
    RegisterUserResponse:
      type: object
      properties:
        firstName:
          type: string
          example: Gueorgui
        lastName:
          type: string
          example: Adelson-Velski
        email:
          type: string
          example: gueorgui@adelsonvelski.com
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkYXNkYXNAb3V0bG9vay5jb20iLCJyb2xlcyI6IlJPTEVfVVNFUiIsImlhdCI6MTY2MzI2NzM4MCwiZXhwIjoxNjYzMjcyNzgwfQ.fskEFbR0mqsUuD9ATX0i_X6pIFbkoPLmbCH66BRxAu8
    AuthenticationRequest:
      type: object
      properties:
        email:
          type: string
          example: edsger@dijkstra.com
        password:
          maxLength: 16
          minLength: 8
          type: string
          example: abcd1234
    AuthenticationResponse:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Von Neumann
        email:
          type: string
          example: johnvon@neumann.com
        imageUrl:
          type: string
          example: https://s3.com/image.jpg
        token:
          type: string
          example: eyJzdWIiOiJqb2hudm9uQG5ldW1hbm4uY29tIiwicm9sZXMiOiJST0xFX0FETUlOIiwiaWF0IjoxNjYzMjY0MDc5LCJleHAiOjE2NjMyNjk0Nzl9.oz15M17Ivy3uA7QRQluv9wzD1E5bjVqKu0Cvj4YQHkU
    SocialMediaRequest:
      type: object
      properties:
        facebookUrl:
          type: string
        linkedInUrl:
          type: string
        instagramUrl:
          type: string
    UserDataResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: Mary
        lastName:
          type: string
          example: Shaw
        email:
          type: string
          example: mary@shaw.com
        imageUrl:
          type: string
          example: https://s3.com/image.jpg
        role:
          type: string
          example: ROLE_USER
    UpdateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
        imageUrl:
          type: string
        address:
          type: string
        phone:
          type: string
        email:
          type: string
        socialMedia:
          $ref: '#/components/schemas/SocialMediaRequest'
        aboutUsText:
          type: string
        welcomeText:
          type: string
    SocialMediaResponse:
      type: object
      properties:
        facebookUrl:
          type: string
        linkedInUrl:
          type: string
        instagramUrl:
          type: string
    UpdateOrganizationResponse:
      type: object
      properties:
        name:
          type: string
        imageUrl:
          type: string
        address:
          type: string
        phone:
          type: string
        email:
          type: string
        socialMedia:
          $ref: '#/components/schemas/SocialMediaResponse'
        aboutUsText:
          type: string
        welcomeText:
          type: string
    ListSlideResponse:
      type: object
      properties:
        slides:
          type: array
          items:
            $ref: '#/components/schemas/SlideResponse'
    SlideResponse:
      type: object
      properties:
        imageUrl:
          type: string
        order:
          type: integer
          format: int32
    GetOrganizationResponse:
      type: object
      properties:
        name:
          type: string
        image:
          type: string
        phone:
          type: string
        address:
          type: string
        slides:
          type: array
          items:
            $ref: '#/components/schemas/SlideWithTextResponse'
    SlideWithTextResponse:
      type: object
      properties:
        imageUrl:
          type: string
        order:
          type: integer
          format: int32
        text:
          type: string
    CommentResponse:
      type: object
      properties:
        body:
          type: string
    ListCommentResponse:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentResponse'
    GetCategoryResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: Category description
        imageUrl:
          type: string
          example: Category image URL
        name:
          type: string
          example: Category name
    BadRequestRegisterUser:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          example: 400
        message:
          type: string
          example: Bad Request.
        moreInfo:
          type: array
          items:
            type: string
          example:
            - First name must contain only spaces and letters.
            - Last name must contain only spaces and letters.
            - Password must be between 8 and 16 characters long.
            - Email should be valid.
    BadRequestLoginUser:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          example: 400
        message:
          type: string
          example: Bad Request.
        moreInfo:
          type: array
          items:
            type: string
          example:
            - Email has invalid format.
            - Password must be between 8 and 16 characters long.
    BadRequestUpdateCategories:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
        message:
          type: string
        moreInfo:
          type: array
          items:
            type: string
          example:
            - Name cannot be empty.
            - Name must contain only spaces and letters.
    BadRequestCreateNews:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          example: 400
        message:
          type: string
          example: Bad Request.
        moreInfo:
          type: array
          items:
            type: string
          example:
            - Name cannot be empty.
            - Name must contain only spaces and letters.
            - Name must be 50 characters or less.
            - Text cannot be empty.
            - Text must be alphanumeric.
            - Image cannot be empty.
            - Image must be alphanumeric without white spaces.
    BadRequestUpdateNews:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          example: 400
        message:
          type: string
          example: Bad Request.
        moreInfo:
          type: array
          items:
            type: string
          example:
            - Name cannot be empty.
            - Name must contain only spaces and letters.
            - Name must be 50 characters or less.
            - Text cannot be empty.
            - Text must be alphanumeric.
    NewsNotFound:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          example: 404
        message:
          type: string
          example: Object not found in database.
        moreInfo:
          type: array
          items:
            type: string
          example: News not found.
    CategoryNotFound:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          example: 404
        message:
          type: string
          example: Object not found in database.
        moreInfo:
          type: array
          items:
            type: string
          example: Category not found.
    ForbiddenLogin:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          example: 403
        message:
          type: string
          example: Invalid credentials.
        moreInfo:
          type: array
          items:
            Type: string
          example:
            - Invalid username or password.
    Forbidden:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          example: 403
        message:
          type: string
          example: Access denied.
        moreInfo:
          type: array
          items:
            Type: string
          example:
            - Access Denied. Contact your administrator.
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    ListNewsResponse:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 0
        size:
          type: integer
          format: int32
          example: 10
        totalPages:
          type: integer
          format: int32
          example: 1
        news:
          type: array
          items:
            $ref: '#/components/schemas/GetNewsResponse'
    LinkHeader:
      type: string
      example: <linkToFirst>;rel="first";<linkToLast>;rel="last";<linkToNext>;rel="next";<linkToLast>;rel="last";
    GetNewsResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: News name
        content:
          type: string
          example: News text
        imageUrl:
          type: string
          example: News image URL
        category:
          $ref: '#/components/schemas/GetCategoryResponse'
    CreateNewsRequest:
      required:
        - image
        - name
        - text
      type: object
      properties:
        name:
          maxLength: 50
          minLength: 0
          type: string
          example: News name
        text:
          type: string
          example: News text
        image:
          type: string
          example: News image URL
    UpdateNewsRequest:
      type: object
      properties:
        name:
          maxLength: 50
          minLength: 0
          type: string
          example: New news name
        content:
          type: string
          example: New news content
        image:
          type: string
          example: New news image URL
    GetNewsWithCommentsResponse:
      type: object
      properties:
        name:
          type: string
          example: News Name
        comments:
          type: array
          items:
            $ref: '#/components/schemas/GetCommentResponse'
    GetCommentResponse:
      type: object
      properties:
        body:
          type: string
          example: Comment content
    ListCategoryResponse:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 0
        size:
          type: integer
          format: int32
          example: 10
        totalPages:
          type: integer
          format: int32
          example: 1
        categories:
          type: array
          items:
            $ref: '#/components/schemas/GetCategoryResponse'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: [ ]
tags:
  - name: Auth
    description: Authentication operations for the "Auth" resource.
  - name: Activities
  - name: Categories
    description: CRUD Operations related to the "Category" resource.
  - name: Comments
  - name: Contact
  - name: Members
  - name: News
    description: CRUD Operations related to the "News" resource.
  - name: Organization
  - name: Slides
  - name: Testimonials
    description: CRUD Operations related to the "Testimonial" resource.
  - name: Users